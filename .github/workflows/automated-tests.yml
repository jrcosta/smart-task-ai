name: Automated Tests

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  # ============================================
  # BACKEND TESTS
  # ============================================
  backend-tests:
    name: Backend Tests (JUnit + Integration)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smart_task_test
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 25
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: maven
      
      - name: Verify Java and Maven
        run: |
          java -version
          mvn -v
      
      - name: Run Backend Tests
        run: cd backend && mvn -B clean verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/smart_task_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
      
      - name: Generate JaCoCo Coverage
        run: cd backend && mvn -B -q jacoco:report || true
      
      - name: Generate Test Report
        if: always()
        run: cd backend && mvn -B surefire-report:report || true
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/target/surefire-reports/
      
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: backend/target/surefire-reports/TEST-*.xml
          check_name: Backend Test Results
        continue-on-error: true
      
      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/target/site/jacoco/

  # ============================================
  # FRONTEND TESTS
  # ============================================
  frontend-tests:
    name: Frontend Tests (Vitest)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          cd frontend
          npm ci || npm install --no-fund --no-audit
      
      - name: Run Frontend Tests (if present)
        run: |
          cd frontend
          npm run -s test --if-present -- --run --coverage || true
        continue-on-error: true

      - name: Build Frontend
        run: cd frontend && npm run build
      
      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
        continue-on-error: true

  # ============================================
  # INTEGRATION TESTS
  # ============================================
  integration-tests:
    name: Integration Tests (Docker)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set up JDK 25
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: maven
      
      - name: Verify Java and Maven
        run: |
          java -version
          mvn -v
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Build Backend
        run: cd backend && mvn clean package -DskipTests
      
      - name: Build Frontend
        run: cd frontend && npm ci && npm run build
      
      - name: Docker Compose Version
        run: docker compose version

      - name: Build Docker Images
        run: docker compose -f infrastructure/docker-compose-unified.yml build
        continue-on-error: true
      
      - name: Start Docker Containers
        run: docker compose -f infrastructure/docker-compose-unified.yml up -d
      
      - name: Wait for Services (Backend & Frontend)
        run: |
          echo "Waiting for Backend (up to 120s)..."
          for i in {1..24}; do
            if curl -fsS http://localhost:8080/actuator/health | grep -q 'UP'; then
              echo "Backend is UP"; break; fi; sleep 5; done || true
          echo "Waiting for Frontend (up to 60s)..."
          for i in {1..12}; do
            if curl -fsSI http://localhost:3000 >/dev/null; then
              echo "Frontend is responding"; break; fi; sleep 5; done || true
      
      - name: Run Health Checks
        run: |
          echo "🔍 Checking Backend Health..."
          curl -i http://localhost:8080/actuator/health || echo "Backend health check failed"
          
          echo "🔍 Checking Frontend..."
          curl -i http://localhost:3000 || echo "Frontend health check failed"
      
      - name: Collect Logs
        if: always()
        run: docker compose -f infrastructure/docker-compose-unified.yml logs > docker-logs.txt
      
      - name: Upload Docker Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker-logs.txt
      
      - name: Cleanup
        if: always()
        run: docker compose -f infrastructure/docker-compose-unified.yml down -v

  # ============================================
  # CODE COVERAGE REPORT
  # ============================================
  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Backend Coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend-coverage
        continue-on-error: true
      
      - name: Download Frontend Coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend-coverage
        continue-on-error: true
      
      - name: Generate Report
        run: |
          echo "### 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend (Java) | Available in artifacts |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend (React) | Available in artifacts |" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload All Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend-coverage/jacoco.xml,./frontend-coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true
